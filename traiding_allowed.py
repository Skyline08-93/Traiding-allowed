# === traiding_allowed.py (–ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º) ===
import ccxt.async_support as ccxt
import asyncio
import os
import hashlib
import signal
import time
from telegram import Update
from telegram.constants import ParseMode, ChatAction
from telegram.ext import Application, CommandHandler, ContextTypes
from datetime import datetime, timezone

def clean_symbol(symbol):
    return symbol.replace(":USDT", "").replace(":BTC", "").replace(":ETH", "").replace(":", "")

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
commission_rate = 0.001
min_profit = 0.1
max_profit = 3.0
min_trade_volume = 10    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Å–¥–µ–ª–∫–∏ –≤ USDT
max_trade_volume = 100   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Å–¥–µ–ª–∫–∏ –≤ USDT
scan_liquidity_range = (10, 1000)  # –î–∏–∞–ø–∞–∑–æ–Ω –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
real_trading_enabled = os.getenv("REAL_TRADING_ENABLED", "False") == "True"
debug_mode = True
triangle_cache = {}
triangle_hold_time = 5
log_file = "triangle_log.csv"
is_shutting_down = False

# –ö–µ—à —Å—Ç–∞–∫–∞–Ω–æ–≤
orderbook_cache = {}
orderbook_cache_ttl = 5  # —Å–µ–∫—É–Ω–¥

exchange = ccxt.bybit({
    "options": {
        "defaultType": "unified"
    },
    "enableRateLimit": True,
    "apiKey": os.getenv("BYBIT_API_KEY"),
    "secret": os.getenv("BYBIT_API_SECRET")
})

def handle_signal(signum, frame):
    global is_shutting_down
    is_shutting_down = True

signal.signal(signal.SIGINT, handle_signal)
signal.signal(signal.SIGTERM, handle_signal)

async def get_cached_orderbook(symbol):
    now = time.time()
    if symbol in orderbook_cache:
        cached_time, orderbook = orderbook_cache[symbol]
        if now - cached_time < orderbook_cache_ttl:
            return orderbook
    
    orderbook = await exchange.fetch_order_book(symbol)
    orderbook_cache[symbol] = (now, orderbook)
    return orderbook

async def load_symbols():
    markets = await exchange.load_markets()
    return [s for s in markets.keys() if ":" not in s], markets

async def find_triangles(symbols, start_coins):
    triangles = []
    for base in start_coins:
        for sym1 in symbols:
            if not sym1.endswith('/' + base): continue
            mid1 = sym1.split('/')[0]
            for sym2 in symbols:
                if not sym2.startswith(mid1 + '/'): continue
                mid2 = sym2.split('/')[1]
                third = f"{mid2}/{base}"
                if third in symbols or f"{base}/{mid2}" in symbols:
                    triangles.append((base, mid1, mid2))
    return triangles

async def get_avg_price(orderbook_side, target_usdt):
    total_base = 0
    total_usd = 0
    max_liquidity = 0
    for price, volume in orderbook_side:
        price = float(price)
        volume = float(volume)
        usd = price * volume
        max_liquidity += usd
        if total_usd + usd >= target_usdt:
            remain_usd = target_usdt - total_usd
            total_base += remain_usd / price
            total_usd += remain_usd
            break
        else:
            total_base += volume
            total_usd += usd
    if total_usd < target_usdt:
        return None, 0, max_liquidity
    avg_price = total_usd / total_base
    return avg_price, total_usd, max_liquidity

async def get_execution_price(symbol, side, target_usdt):
    try:
        orderbook = await get_cached_orderbook(symbol)
        if side == "buy":
            return await get_avg_price(orderbook['asks'], target_usdt)
        else:
            return await get_avg_price(orderbook['bids'], target_usdt)
    except Exception as e:
        if debug_mode:
            print(f"[–û—à–∏–±–∫–∞ —Å—Ç–∞–∫–∞–Ω–∞ {symbol}]: {e}")
        return None, 0, 0

def format_line(index, pair, price, side, volume_usd, color, liquidity):
    emoji = {"green": "üü¢", "yellow": "üü°", "red": "üü•"}.get(color, "")
    return f"{emoji} {index}. {pair} - {price:.6f} ({side}), –∏—Å–ø–æ–ª–Ω–µ–Ω–æ ${volume_usd:.2f}, –¥–æ—Å—Ç—É–ø–Ω–æ ${liquidity:.2f}"

async def send_telegram_message(text):
    try:
        await telegram_app.bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=text, parse_mode=ParseMode.HTML)
    except Exception as e:
        if debug_mode:
            print(f"[–û—à–∏–±–∫–∞ Telegram]: {e}")

def log_route(base, mid1, mid2, profit, volume, min_liquidity):
    with open(log_file, "a") as f:
        f.write(f"{datetime.now(timezone.utc)},{base}->{mid1}->{mid2}->{base},{profit:.4f},{volume:.2f},{min_liquidity:.2f}\n")

async def get_available_balance(coin: str = 'USDT') -> float:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (Unified Account)"""
    try:
        balance = await exchange.fetch_balance({'type': 'unified'})
        
        # –î–ª—è Unified Account 2024
        if 'list' in balance.get('info', {}).get('result', {}):
            for asset in balance['info']['result']['list'][0]['coin']:
                if asset['coin'] == coin:
                    return float(asset['availableToWithdraw'])
        
        # Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        return float(balance['total'].get(coin, {}).get('availableBalance', 0))
    
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞] {e}")
        return 0.0

async def fetch_balances():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã —Å —É—á–µ—Ç–æ–º Unified Account"""
    try:
        balances = await exchange.fetch_balance({'type': 'unified'})
        result = {}
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ API (2024)
        if 'list' in balances.get('info', {}).get('result', {}):
            for asset in balances['info']['result']['list'][0]['coin']:
                if float(asset['equity']) > 0:
                    result[asset['coin']] = {
                        'free': float(asset['availableToWithdraw']),
                        'total': float(asset['equity'])
                    }
            return result
        
        # Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        for coin, amount in balances['total'].items():
            if isinstance(amount, (int, float)) and amount > 0:
                result[coin] = {
                    'free': balances['total'].get(coin, {}).get('availableBalance', amount),
                    'total': amount
                }
        return result
        
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞] {e}")
        return {}

async def balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è Telegram —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –±–∞–ª–∞–Ω—Å–æ–≤"""
    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id,
        action=ChatAction.TYPING
    )
    
    balances = await fetch_balances()
    if not balances:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã")
        return
    
    msg = "<b>üíº –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã:</b>\n"
    for coin, data in balances.items():
        free = data.get('free', 0)
        total = data.get('total', 0)
        msg += f"{coin}: {free:.4f} / {total:.4f} (—Å–≤–æ–±–æ–¥–Ω–æ/–≤—Å–µ–≥–æ)\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω–æ–º –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ USDT
    available_usdt = await get_available_balance('USDT')
    msg += f"\n<b>üîÑ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏:</b> {available_usdt:.2f} USDT"
    
    await update.message.reply_text(msg, parse_mode=ParseMode.HTML)

async def simulate_trading_execution(route_id, profit):
    await asyncio.sleep(1)
    msg = f"ü§ñ <b>–°–∏–º—É–ª—è—Ü–∏—è —Å–¥–µ–ª–∫–∏</b>\n–ú–∞—Ä—à—Ä—É—Ç: {route_id}\n–ü—Ä–∏–±—ã–ª—å: {profit:.2f}%"
    await send_telegram_message(msg)
    return True

async def execute_real_trade(route_id: str, steps: list, base_coin: str, markets: dict, dynamic_volume: float):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –Ω–∞–¥–µ–∂–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞"""
    try:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞
        start_time = datetime.now(timezone.utc)
        log_msg = f"\n=== –ù–ê–ß–ê–õ–û –°–î–ï–õ–ö–ò {start_time} ==="
        log_msg += f"\n–ú–∞—Ä—à—Ä—É—Ç: {route_id}"
        log_msg += f"\n–û–±—ä–µ–º: {dynamic_volume:.2f} {base_coin}"
        print(log_msg)
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        try:
            balance = await exchange.fetch_balance({'type': 'unified'})
            if 'info' in balance and 'result' in balance['info']:
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API (2024)
                available = float(balance['info']['result']['list'][0]['coin'][0].get('availableToWithdraw', 0))
            else:
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
                available = float(balance['total'].get(base_coin, 0))
            
            print(f"[BALANCE DEBUG] {base_coin} available: {available}, raw data: {balance}")
            
            if available < dynamic_volume:
                error_msg = f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {base_coin}. –î–æ—Å—Ç—É–ø–Ω–æ: {available:.2f}, –Ω—É–∂–Ω–æ: {dynamic_volume:.2f}"
                print(error_msg)
                await send_telegram_message(error_msg)
                return False
                
        except ValueError as ve:
            error_msg = f"üö® –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {str(ve)}. Raw data: {balance}"
            print(error_msg)
            await send_telegram_message("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞. –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return False
            
        except Exception as e:
            error_msg = f"üö® –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –±–∞–ª–∞–Ω—Å–∞: {str(e)}"
            print(error_msg)
            await send_telegram_message("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞")
            return False

        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
        executed_orders = []
        current_amount = dynamic_volume
        
        for i, (symbol, side, price, amount) in enumerate(steps, 1):
            try:
                # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞
                market = markets[symbol]
                tick_size = market.get('precision', {}).get('price', 0.00000001)
                
                order = await exchange.create_order(
                    symbol=symbol,
                    type='limit',
                    side=side,
                    amount=float(amount),
                    price=round(float(price) / tick_size) * tick_size,
                    params={'timeInForce': 'PostOnly'}
                )
                executed_orders.append(order)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
                await asyncio.sleep(3)
                order_status = await exchange.fetch_order(order['id'], symbol)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                filled = float(order_status['filled'])
                if filled == 0:
                    raise ValueError(f"Order not filled: {order_status}")
                    
                if side == 'buy':
                    current_amount = filled * float(order_status['average'])
                else:
                    current_amount = filled

            except Exception as e:
                error_msg = f"üî• –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ {i}: {str(e)}"
                print(error_msg)
                await send_telegram_message(error_msg)
                
                # –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
                for o in executed_orders:
                    try:
                        await exchange.cancel_order(o['id'], o['symbol'])
                    except:
                        pass
                return False

        # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
        profit = current_amount - dynamic_volume
        profit_percent = (profit / dynamic_volume) * 100
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        log_msg += f"\n–ü—Ä–∏–±—ã–ª—å: {profit:.2f} USDT ({profit_percent:.2f}%)"
        log_msg += f"\n=== –ö–û–ù–ï–¶ –°–î–ï–õ–ö–ò {datetime.now(timezone.utc)} ==="
        print(log_msg)
        
        with open(log_file, "a") as f:
            f.write(log_msg + "\n")
            
        await send_telegram_message(
            f"‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
            f"–ü—Ä–∏–±—ã–ª—å: {profit:.2f} USDT ({profit_percent:.2f}%)\n"
            f"–ò—Å—Ö–æ–¥–Ω—ã–π –æ–±—ä–µ–º: {dynamic_volume:.2f} USDT\n"
            f"–§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {current_amount:.2f} USDT"
        )
        
        return True

    except Exception as e:
        error_msg = f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        print(error_msg)
        await send_telegram_message("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏")
        return False

async def check_triangle(base, mid1, mid2, symbols, markets):
    try:
        if is_shutting_down:
            if debug_mode:
                print("[DEBUG] –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
            return

        if debug_mode:
            print(f"\n[SCAN] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∫—É: {base} -> {mid1} -> {mid2} -> {base}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        s1 = f"{mid1}/{base}" if f"{mid1}/{base}" in symbols else f"{base}/{mid1}"
        s2 = f"{mid2}/{mid1}" if f"{mid2}/{mid1}" in symbols else f"{mid1}/{mid2}"
        s3 = f"{mid2}/{base}" if f"{mid2}/{base}" in symbols else f"{base}/{mid2}"

        if debug_mode:
            print(f"[PAIRS] {s1} | {s2} | {s3}")

        if not all(p in symbols for p in [s1, s2, s3]):
            if debug_mode:
                print(f"[SKIP] –ù–µ –≤—Å–µ –ø–∞—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        side1 = "buy" if f"{mid1}/{base}" in symbols else "sell"
        side2 = "buy" if f"{mid2}/{mid1}" in symbols else "sell"
        side3 = "sell" if f"{mid2}/{base}" in symbols else "buy"

        if debug_mode:
            print(f"[SIDES] {side1} | {side2} | {side3}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å (–¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
        if debug_mode:
            print(f"[LIQUIDITY] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å —Å –æ–±—ä–µ–º–æ–º –¥–æ ${scan_liquidity_range[1]}")

        price1, vol1, liq1 = await get_execution_price(s1, side1, scan_liquidity_range[1])
        price2, vol2, liq2 = await get_execution_price(s2, side2, scan_liquidity_range[1])
        price3, vol3, liq3 = await get_execution_price(s3, side3, scan_liquidity_range[1])

        if debug_mode:
            print(f"[LIQUIDITY RESULT] {s1}: {liq1:.2f} | {s2}: {liq2:.2f} | {s3}: {liq3:.2f}")

        if None in [price1, price2, price3]:
            if debug_mode:
                print("[SKIP] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä")
            return

        # –†–∞—Å—á–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±—ä–µ–º–∞
        min_liquidity = min(liq1, liq2, liq3)
        dynamic_volume = min(max(min_liquidity * 0.9, min_trade_volume), max_trade_volume)

        if debug_mode:
            print(f"[VOLUME] Min liquidity: {min_liquidity:.2f} -> Dynamic volume: {dynamic_volume:.2f}")

        # –ü–µ—Ä–µ—Å—á–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –æ–±—ä–µ–º–æ–º
        price1, vol1, liq1 = await get_execution_price(s1, side1, dynamic_volume)
        price2, vol2, liq2 = await get_execution_price(s2, side2, dynamic_volume)
        price3, vol3, liq3 = await get_execution_price(s3, side3, dynamic_volume)

        # –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
        step1 = (1 / price1 if side1 == "buy" else price1) * (1 - commission_rate)
        step2 = (1 / price2 if side2 == "buy" else price2) * (1 - commission_rate)
        step3 = (price3 if side3 == "sell" else 1 / price3) * (1 - commission_rate)

        result = step1 * step2 * step3
        profit_percent = (result - 1) * 100

        if debug_mode:
            print(f"[PROFIT] –†–∞—Å—á–µ—Ç–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {profit_percent:.2f}%")

        if not (min_profit <= profit_percent <= max_profit):
            if debug_mode:
                print(f"[SKIP] –ü—Ä–∏–±—ã–ª—å {profit_percent:.2f}% –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {min_profit}-{max_profit}%")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        route_id = f"{base}->{mid1}->{mid2}->{base}"
        route_hash = hashlib.md5(route_id.encode()).hexdigest()
        now = datetime.now(timezone.utc)
        prev_time = triangle_cache.get(route_hash)

        if prev_time and (now - prev_time).total_seconds() < triangle_hold_time:
            if debug_mode:
                remaining = triangle_hold_time - (now - prev_time).total_seconds()
                print(f"[CACHE] –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–∂–∏–¥–∞–Ω–∏–µ: {remaining:.1f} —Å–µ–∫")
            return

        triangle_cache[route_hash] = now

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        if debug_mode:
            print("[BALANCE] –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å...")

        available = await get_available_balance(base.split(':')[0])
        if available < dynamic_volume:
            if debug_mode:
                print(f"[SKIP] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {available:.2f}, –Ω—É–∂–Ω–æ: {dynamic_volume:.2f}")
            return

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_lines = [
            f"üîç –ù–∞–π–¥–µ–Ω–∞ —Å–≤—è–∑–∫–∞: {route_id}",
            f"üìà –ü—Ä–∏–±—ã–ª—å: {profit_percent:.2f}%",
            f"üíµ –û–±—ä–µ–º: ${dynamic_volume:.2f}",
            f"üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${min(liq1, liq2, liq3):.2f}",
            f"üîÑ –®–∞–≥–∏:",
            f"1. {s1} {side1} @ {price1:.6f}",
            f"2. {s2} {side2} @ {price2:.6f}",
            f"3. {s3} {side3} @ {price3:.6f}"
        ]

        if debug_mode:
            print("\n".join(message_lines))

        await send_telegram_message("\n".join(message_lines))
        log_route(base, mid1, mid2, profit_percent, dynamic_volume, min(liq1, liq2, liq3))

        # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        if real_trading_enabled:
            if debug_mode:
                print("[TRADE] –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏...")
            # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è)

    except Exception as e:
        if debug_mode:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–≤—è–∑–∫–∏: {str(e)}")
            import traceback
            traceback.print_exc()

async def main():
    symbols, markets = await load_symbols()
    start_coins = ['USDT']
    triangles = await find_triangles(symbols, start_coins)
    print(f"üîÅ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤: {len(triangles)}")

    telegram_app.add_handler(CommandHandler("balance", balance_command))
    await telegram_app.initialize()
    await telegram_app.start()
    await send_telegram_message("‚ôªÔ∏è –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

    while not is_shutting_down:
        tasks = [check_triangle(base, mid1, mid2, symbols, markets) for base, mid1, mid2 in triangles]
        await asyncio.gather(*tasks)
        await asyncio.sleep(10)

    await telegram_app.stop()
    await telegram_app.shutdown()
    await exchange.close()

if __name__ == '__main__':
    asyncio.run(main())